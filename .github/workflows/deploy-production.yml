# Production Deployment CI/CD Pipeline
name: Production Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
    types: [ closed ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  # Test and Quality Assurance
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          backend/package-lock.json
          frontend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run backend tests
      run: |
        cd backend
        npm test -- --coverage --watchAll=false
        
    - name: Run backend linting
      run: |
        cd backend
        npm run lint
        
    - name: Run frontend type checking
      run: |
        cd frontend
        npm run type-check
        
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Run E2E tests
      run: |
        cd frontend
        npx playwright install --with-deps chromium
        # Start backend for E2E tests
        cd ../backend && npm start &
        sleep 10
        cd ../frontend
        npm run test:e2e -- --project=chromium
        
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 7

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run npm audit (backend)
      run: |
        cd backend
        npm audit --audit-level high
        
    - name: Run npm audit (frontend)
      run: |
        cd frontend
        npm audit --audit-level high

  # Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        component: [backend, frontend]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.component }}
        file: ./${{ matrix.component }}/Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}
        
    - name: Add production server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts
        
    - name: Create environment file
      run: |
        cat > .env.production << EOF
        NODE_ENV=production
        PORT=3002
        JWT_SECRET=${{ secrets.JWT_SECRET }}
        JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
        JWT_EXPIRES_IN=2h
        JWT_REFRESH_EXPIRES_IN=7d
        DATABASE_TYPE=nedb
        DATABASE_PATH=/app/database
        CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
        RATE_LIMIT_WINDOW=15
        RATE_LIMIT_MAX=100
        LOG_LEVEL=info
        REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
        GRAFANA_PASSWORD=${{ secrets.GRAFANA_PASSWORD }}
        BACKUP_S3_BUCKET=${{ secrets.BACKUP_S3_BUCKET }}
        AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION=${{ secrets.AWS_REGION }}
        FRONTEND_URL=${{ secrets.FRONTEND_URL }}
        BACKEND_URL=${{ secrets.BACKEND_URL }}
        EOF
        
    - name: Deploy to production server
      run: |
        # Copy files to production server
        scp -r ./ ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:${{ secrets.PRODUCTION_PATH }}/
        
        # Execute deployment script on production server
        ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          cd ${{ secrets.PRODUCTION_PATH }}
          
          # Pull latest images
          docker-compose -f docker-compose.production.yml pull
          
          # Create backup before deployment
          ./scripts/backup-data.sh
          
          # Deploy with zero downtime
          docker-compose -f docker-compose.production.yml up -d --remove-orphans
          
          # Wait for services to be healthy
          sleep 30
          
          # Run health checks
          ./scripts/health-check.sh --verbose
          
          # Cleanup old images
          docker image prune -f
        EOF
        
    - name: Post-deployment verification
      run: |
        # Wait for services to stabilize
        sleep 60
        
        # Verify deployment
        ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          cd ${{ secrets.PRODUCTION_PATH }}
          
          # Final health check
          if ./scripts/health-check.sh; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment verification failed!"
            
            # Rollback on failure
            echo "🔄 Rolling back deployment..."
            docker-compose -f docker-compose.production.yml down
            
            # Restore from backup
            # Note: Implement backup restoration logic here
            
            exit 1
          fi
        EOF
        
    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          🚀 Production Deployment ${{ job.status }}!
          
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          Frontend URL: ${{ secrets.FRONTEND_URL }}
          Backend URL: ${{ secrets.BACKEND_URL }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Run performance tests
      run: |
        # Create performance test script
        cat > performance-test.js << 'EOF'
        import http from 'k6/http';
        import { check, sleep } from 'k6';
        
        export const options = {
          stages: [
            { duration: '2m', target: 10 },
            { duration: '5m', target: 10 },
            { duration: '2m', target: 20 },
            { duration: '5m', target: 20 },
            { duration: '2m', target: 0 },
          ],
          thresholds: {
            http_req_duration: ['p(95)<2000'],
            http_req_failed: ['rate<0.05'],
          },
        };
        
        export default function() {
          const baseUrl = '${{ secrets.BACKEND_URL }}';
          
          // Test health endpoint
          let response = http.get(`${baseUrl}/api/health`);
          check(response, {
            'health endpoint status is 200': (r) => r.status === 200,
            'response time < 500ms': (r) => r.timings.duration < 500,
          });
          
          sleep(1);
        }
        EOF
        
        # Run performance test
        k6 run performance-test.js
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: results.json
        retention-days: 7